{"version":3,"sources":["components/Card.js","components/Controls.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","value","suit","src","image","Controls","onClick","drawCard","id","Game","cards","useState","deck","setDeck","useEffect","fetch","then","response","ok","errorMessage","status","statusText","Error","json","body","catch","error","console","message","event","log","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sLAYeA,EAVF,SAACC,GACZ,OACE,gCACGA,EAAMC,MACND,EAAME,KACP,qBAAKC,IAAKH,EAAMI,YCCPC,EANE,SAACL,GAChB,OACE,wBAAQM,QAASN,EAAMO,SAAUC,GAAG,cAApC,wBC2DWC,EA3DF,SAACT,GAAW,IAuBnBU,EAvBkB,EACEC,mBAAS,IADX,mBACfC,EADe,KACTC,EADS,KAGtBC,qBAAW,WACTC,MAAM,yDACLC,MAAK,SAAAC,GACJ,GAAGA,EAASC,GACV,OAAOD,EAEP,IAAIE,EAAY,UAAMF,EAASG,OAAf,YAAyBH,EAASI,WAAlC,KAEhB,MADQ,IAAIC,MAAMH,MAIrBH,MAAK,SAAAC,GACJ,OAAOA,EAASM,UAEjBP,MAAK,SAAAQ,GACJX,EAAQW,MAETC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAR,0BAAiCA,EAAME,eACtD,IAGAhB,EAAKF,QACRA,EACI,gCACE,cAAC,EAAD,CAEEF,GAAMI,EAAKF,MAAM,GAAGF,GACpBP,MAASW,EAAKF,MAAM,GAAGT,MACvBC,KAAQU,EAAKF,MAAM,GAAGR,KACtBE,MAASQ,EAAKF,MAAM,GAAGN,OAJhBQ,EAAKF,MAAM,GAAGF,IAMvB,cAAC,EAAD,CAEEA,GAAMI,EAAKF,MAAM,GAAGF,GACpBP,MAASW,EAAKF,MAAM,GAAGT,MACvBC,KAAQU,EAAKF,MAAM,GAAGR,KACtBE,MAASQ,EAAKF,MAAM,GAAGN,OAJhBQ,EAAKF,MAAM,GAAGF,QAe7B,OACE,gCACE,uCACCE,EACD,cAAC,EAAD,CAAUH,SAVG,SAAAsB,GACfd,MAAM,sEACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASM,UAC1BP,MAAK,SAAAC,GAAQ,OAAIU,QAAQG,IAAIb,aCxCnBc,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.bc87d386.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = (props) => {\n  return(\n    <div>\n      {props.value}\n      {props.suit}\n      <img src={props.image}></img>\n    </div>\n  )\n}\n\nexport default Card","import React from 'react'\n\nconst Controls = (props) => {\n  return(\n    <button onClick={props.drawCard} id=\"drawCardBtn\">Draw Card</button>\n  )\n}\n\nexport default Controls","import React, { useState, useEffect } from 'react'\nimport Card from './Card'\nimport Controls from './Controls'\n\nconst Game = (props) => {\n  const [deck, setDeck] = useState([])\n\n  useEffect( () => {\n    fetch(\"https://deckofcardsapi.com/api/deck/new/draw/?count=2\")\n    .then(response => {\n      if(response.ok){\n        return response\n      } else{\n        let errorMessage = `${response.status}(${response.statusText})`,\n        error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then(response => {\n      return response.json()\n    })\n    .then(body => {\n      setDeck(body)\n    })\n    .catch(error => console.error(`Error in fetch: ${error.message}`))\n  }, [])\n\n  let cards\n  if(deck.cards){\n  cards = (\n      <div>\n        <Card\n          key = {deck.cards[0].id}\n          id = {deck.cards[0].id}\n          value = {deck.cards[0].value}\n          suit = {deck.cards[0].suit}\n          image = {deck.cards[0].image}\n        />\n        <Card\n          key = {deck.cards[1].id}\n          id = {deck.cards[1].id}\n          value = {deck.cards[1].value}\n          suit = {deck.cards[1].suit}\n          image = {deck.cards[1].image}\n        />\n      </div>\n  )}\n\n  const drawCard = event => {\n    fetch(\"https://deckofcardsapi.com/api/deck/<<deck.deck_id>>/draw/?count=2\")\n    .then(response => response.json())\n    .then(response => console.log(response))\n  }\n\n  return(\n    <div>\n      <h1>Hello</h1>\n      {cards}\n      <Controls drawCard={drawCard} />\n    </div>\n  )\n}\n\nexport default Game","import './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}