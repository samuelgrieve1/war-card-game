{"ast":null,"code":"var _jsxFileName = \"/Users/samuelgrieve/Desktop/coding/war/src/components/CardDeck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardDeck = props => {\n  _s();\n\n  const [deck, setDeck] = useState([]);\n  useEffect(() => {\n    fetch(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\").then(response => {\n      if (response, ok) {\n        return response;\n      } else {\n        let errorMessage = `${response.status}(${response.statusText})`,\n            error = new Error(errorMessage);\n        throw error;\n      }\n    }).then(response => {\n      return response.json();\n    }).then(body => {\n      setDeck(body);\n    }).catch(error => console.error(`Error in fetch: ${error.message}`));\n  }, []);\n  const shuffleDeck = fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=0').then(response => response.json()).then(data => {\n    valueOfCard.innerHTML = data.value;\n  }); // let drawCard = (\n  //   fetch('https://deckofcardsapi.com/api/deck/{deckId}/draw/?count=1')\n  //   .then(response => response.json())\n  //   .then(data => {\n  //     value = data.value\n  //   })\n  // )\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"valueOfCard\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardDeck, \"NGuX+IhPEoaYDnAUn9U4qFBy9U0=\");\n\n_c = CardDeck;\nexport default CardDeck;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardDeck\");","map":{"version":3,"sources":["/Users/samuelgrieve/Desktop/coding/war/src/components/CardDeck.js"],"names":["React","useState","Card","CardDeck","props","deck","setDeck","useEffect","fetch","then","response","ok","errorMessage","status","statusText","error","Error","json","body","catch","console","message","shuffleDeck","data","valueOfCard","innerHTML","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AAEAM,EAAAA,SAAS,CAAE,MAAM;AACfC,IAAAA,KAAK,CAAC,+DAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAI;AAChB,UAAGA,QAAQ,EAACC,EAAZ,EAAe;AACb,eAAOD,QAAP;AACD,OAFD,MAEM;AACJ,YAAIE,YAAY,GAAI,GAAEF,QAAQ,CAACG,MAAO,IAAGH,QAAQ,CAACI,UAAW,GAA7D;AAAA,YACAC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAV,CADR;AAEA,cAAMG,KAAN;AACD;AACF,KATD,EAUCN,IAVD,CAUMC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACO,IAAT,EAAP;AACD,KAZD,EAaCR,IAbD,CAaMS,IAAI,IAAI;AACZZ,MAAAA,OAAO,CAACY,IAAD,CAAP;AACD,KAfD,EAgBCC,KAhBD,CAgBOJ,KAAK,IAAIK,OAAO,CAACL,KAAR,CAAe,mBAAkBA,KAAK,CAACM,OAAQ,EAA/C,CAhBhB;AAiBD,GAlBQ,EAkBN,EAlBM,CAAT;AAqBA,QAAMC,WAAW,GACfd,KAAK,CAAC,+DAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACO,IAAT,EADlB,EAECR,IAFD,CAEMc,IAAI,IAAI;AACZC,IAAAA,WAAW,CAACC,SAAZ,GAAwBF,IAAI,CAACG,KAA7B;AACD,GAJD,CADF,CAxB0B,CAgC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,EAAE,EAAC,aAAR;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA7CD;;GAAMvB,Q;;KAAAA,Q;AA+CN,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react'\nimport Card from './Card'\n\nconst CardDeck = (props) => {\n  const [deck, setDeck] = useState([])\n\n  useEffect( () => {\n    fetch(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\")\n    .then(response => {\n      if(response,ok){\n        return response\n      } else{\n        let errorMessage = `${response.status}(${response.statusText})`,\n        error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then(response => {\n      return response.json()\n    })\n    .then(body => {\n      setDeck(body)\n    })\n    .catch(error => console.error(`Error in fetch: ${error.message}`))\n  }, [])\n\n\n  const shuffleDeck = (\n    fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=0')\n    .then(response => response.json())\n    .then(data => {\n      valueOfCard.innerHTML = data.value\n    })\n  )\n\n  // let drawCard = (\n  //   fetch('https://deckofcardsapi.com/api/deck/{deckId}/draw/?count=1')\n  //   .then(response => response.json())\n  //   .then(data => {\n  //     value = data.value\n  //   })\n  // )\n\n  return(\n    <div id=\"valueOfCard\">\n      <h1>Cards</h1>\n    </div>\n  )\n}\n\nexport default CardDeck"]},"metadata":{},"sourceType":"module"}