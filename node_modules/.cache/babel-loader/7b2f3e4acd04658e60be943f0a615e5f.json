{"ast":null,"code":"var _jsxFileName = \"/Users/samuelgrieve/Desktop/coding/war-card-game/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport Controls from './Controls';\nimport logo from '../img/back-of-card.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = props => {\n  _s();\n\n  const [deck, setDeck] = useState([]);\n  useEffect(() => {\n    fetch(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\").then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let errorMessage = `${response.status}(${response.statusText})`,\n            error = new Error(errorMessage);\n        throw error;\n      }\n    }).then(response => {\n      return response.json();\n    }).then(body => {\n      setDeck(body);\n\n      if (deck.remaining > 0) {\n        drawCard();\n      }\n    }).catch(error => console.error(`Error in fetch: ${error.message}`));\n  }, []);\n  let cards; // if (deck.cards) {\n  //   cards = deck.cards.map((card) => {\n  //     return(\n  //       <Card\n  //         key = {card.id}\n  //         id = {card.id}\n  //         value = {card.value}\n  //         suit = {card.suit}\n  //         image = {card.image}\n  //       />\n  //     )\n  //   })\n  // }\n\n  const userCardPlayed = document.getElementById(\"user-card-played\");\n  const compCardPlayed = document.getElementById(\"comp-card-played\");\n\n  const drawCard = event => {\n    if (deck.remaining > 0) {\n      fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/draw/?count=2`).then(response => {\n        return response.json();\n      }).then(card => {\n        if (card.cards[0].image) {\n          userCardPlayed.innerHTML = `<img src=${card.cards[0].image}></img>`;\n        }\n\n        if (card.cards[1].image) {\n          compCardPlayed.innerHTML = `<img src=${card.cards[1].image}></img>`;\n        }\n\n        deck.remaining -= 2;\n      });\n    } else {\n      userCardPlayed.innerHTML = \"Out of cards\";\n      compCardPlayed.innerHTML = \"Out of cards\";\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cell\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-stack\",\n        id: \"comp-card-stack\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cell\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-played\",\n        id: \"comp-card-played\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-played\",\n        id: \"user-card-played\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cell\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-stack\",\n        id: \"user-card-stack\",\n        onClick: drawCard,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"NGuX+IhPEoaYDnAUn9U4qFBy9U0=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/samuelgrieve/Desktop/coding/war-card-game/src/components/Game.js"],"names":["React","useState","useEffect","Card","Controls","logo","Game","props","deck","setDeck","fetch","then","response","ok","errorMessage","status","statusText","error","Error","json","body","remaining","drawCard","catch","console","message","cards","userCardPlayed","document","getElementById","compCardPlayed","event","deck_id","card","image","innerHTML"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Card from './Card'\nimport Controls from './Controls'\nimport logo from '../img/back-of-card.png'\n\nconst Game = (props) => {\n  const [deck, setDeck] = useState([])\n\n  useEffect( () => {\n    fetch(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\")\n    .then(response => {\n      if(response.ok){\n        return response\n      } else{\n        let errorMessage = `${response.status}(${response.statusText})`,\n        error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then(response => {\n      return response.json()\n    })\n    .then(body => {\n      setDeck(body)\n      if (deck.remaining > 0) {\n        drawCard()\n      }\n    })\n    .catch(error => console.error(`Error in fetch: ${error.message}`))\n  }, [])\n\n  let cards\n\n  // if (deck.cards) {\n  //   cards = deck.cards.map((card) => {\n  //     return(\n  //       <Card\n  //         key = {card.id}\n  //         id = {card.id}\n  //         value = {card.value}\n  //         suit = {card.suit}\n  //         image = {card.image}\n  //       />\n  //     )\n  //   })\n  // }\n\n  const userCardPlayed = document.getElementById(\"user-card-played\")\n  const compCardPlayed = document.getElementById(\"comp-card-played\")\n\n  const drawCard = event => {\n    if (deck.remaining > 0) {\n      fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/draw/?count=2`)\n      .then(response => {\n        return response.json()\n      })\n      .then(card => {\n        if(card.cards[0].image){\n          userCardPlayed.innerHTML = `<img src=${card.cards[0].image}></img>`\n        }\n        if(card.cards[1].image){\n          compCardPlayed.innerHTML = `<img src=${card.cards[1].image}></img>`\n        }\n        deck.remaining -= 2\n      })\n    }else{\n      userCardPlayed.innerHTML = \"Out of cards\"\n      compCardPlayed.innerHTML = \"Out of cards\"\n    }\n  }\n\n  return(\n    <div>\n      <div className=\"cell\">\n      <div className=\"card-stack\" id=\"comp-card-stack\">\n        <img src={logo}></img>\n      </div>\n      </div>\n\n      <div className=\"cell\">\n      <div className=\"card-played\" id=\"comp-card-played\"></div>\n      <div className=\"card-played\" id=\"user-card-played\"></div>\n      </div>\n\n      <div className=\"cell\">\n      <div className=\"card-stack\" id=\"user-card-stack\" onClick={drawCard}>\n        <img src={logo}></img>\n      </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}