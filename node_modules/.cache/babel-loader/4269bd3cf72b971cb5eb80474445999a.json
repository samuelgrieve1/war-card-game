{"ast":null,"code":"import _slicedToArray from\"/Users/samuelgrieve/Desktop/coding/war-card-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import Card from'./Card';import Controls from'./Controls';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Game=function Game(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),deck=_useState2[0],setDeck=_useState2[1];useEffect(function(){fetch(\"https://deckofcardsapi.com/api/deck/new/draw/?count=2\").then(function(response){if(response.ok){return response;}else{var errorMessage=\"\".concat(response.status,\"(\").concat(response.statusText,\")\"),error=new Error(errorMessage);throw error;}}).then(function(response){return response.json();}).then(function(body){setDeck(body);}).catch(function(error){return console.error(\"Error in fetch: \".concat(error.message));});},[]);var cards;if(deck.cards){cards=/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Card,{id:deck.cards[0].id,value:deck.cards[0].value,suit:deck.cards[0].suit,image:deck.cards[0].image},deck.cards[0].id),/*#__PURE__*/_jsx(Card,{id:deck.cards[1].id,value:deck.cards[1].value,suit:deck.cards[1].suit,image:deck.cards[1].image},deck.cards[1].id)]});}var drawCard=function drawCard(event){fetch(\"https://deckofcardsapi.com/api/deck/<<deck.deck_id>>/draw/?count=2\").then(function(response){return response.json();}).then(function(response){return console.log(response);});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Hello\"}),cards,/*#__PURE__*/_jsx(Controls,{drawCard:drawCard})]});};export default Game;","map":{"version":3,"sources":["/Users/samuelgrieve/Desktop/coding/war-card-game/src/components/Game.js"],"names":["React","useState","useEffect","Card","Controls","Game","props","deck","setDeck","fetch","then","response","ok","errorMessage","status","statusText","error","Error","json","body","catch","console","message","cards","id","value","suit","image","drawCard","event","log"],"mappings":"uKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,C,wFAEA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACC,KAAD,CAAW,eACEL,QAAQ,CAAC,EAAD,CADV,wCACfM,IADe,eACTC,OADS,eAGtBN,SAAS,CAAE,UAAM,CACfO,KAAK,CAAC,uDAAD,CAAL,CACCC,IADD,CACM,SAAAC,QAAQ,CAAI,CAChB,GAAGA,QAAQ,CAACC,EAAZ,CAAe,CACb,MAAOD,CAAAA,QAAP,CACD,CAFD,IAEM,CACJ,GAAIE,CAAAA,YAAY,WAAMF,QAAQ,CAACG,MAAf,aAAyBH,QAAQ,CAACI,UAAlC,KAAhB,CACAC,KAAK,CAAG,GAAIC,CAAAA,KAAJ,CAAUJ,YAAV,CADR,CAEA,KAAMG,CAAAA,KAAN,CACD,CACF,CATD,EAUCN,IAVD,CAUM,SAAAC,QAAQ,CAAI,CAChB,MAAOA,CAAAA,QAAQ,CAACO,IAAT,EAAP,CACD,CAZD,EAaCR,IAbD,CAaM,SAAAS,IAAI,CAAI,CACZX,OAAO,CAACW,IAAD,CAAP,CACD,CAfD,EAgBCC,KAhBD,CAgBO,SAAAJ,KAAK,QAAIK,CAAAA,OAAO,CAACL,KAAR,2BAAiCA,KAAK,CAACM,OAAvC,EAAJ,EAhBZ,EAiBD,CAlBQ,CAkBN,EAlBM,CAAT,CAoBA,GAAIC,CAAAA,KAAJ,CACA,GAAGhB,IAAI,CAACgB,KAAR,CAAc,CACdA,KAAK,cACD,oCACE,KAAC,IAAD,EAEE,EAAE,CAAIhB,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAcC,EAFtB,CAGE,KAAK,CAAIjB,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAcE,KAHzB,CAIE,IAAI,CAAIlB,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAcG,IAJxB,CAKE,KAAK,CAAInB,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAcI,KALzB,EACSpB,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAcC,EADvB,CADF,cAQE,KAAC,IAAD,EAEE,EAAE,CAAIjB,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAcC,EAFtB,CAGE,KAAK,CAAIjB,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAcE,KAHzB,CAIE,IAAI,CAAIlB,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAcG,IAJxB,CAKE,KAAK,CAAInB,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAcI,KALzB,EACSpB,IAAI,CAACgB,KAAL,CAAW,CAAX,EAAcC,EADvB,CARF,GADJ,CAiBE,CAEF,GAAMI,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,CAAI,CACxBpB,KAAK,CAAC,oEAAD,CAAL,CACCC,IADD,CACM,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACO,IAAT,EAAJ,EADd,EAECR,IAFD,CAEM,SAAAC,QAAQ,QAAIU,CAAAA,OAAO,CAACS,GAAR,CAAYnB,QAAZ,CAAJ,EAFd,EAGD,CAJD,CAMA,mBACE,oCACE,6BADF,CAEGY,KAFH,cAGE,KAAC,QAAD,EAAU,QAAQ,CAAEK,QAApB,EAHF,GADF,CAOD,CAzDD,CA2DA,cAAevB,CAAAA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Card from './Card'\nimport Controls from './Controls'\n\nconst Game = (props) => {\n  const [deck, setDeck] = useState([])\n\n  useEffect( () => {\n    fetch(\"https://deckofcardsapi.com/api/deck/new/draw/?count=2\")\n    .then(response => {\n      if(response.ok){\n        return response\n      } else{\n        let errorMessage = `${response.status}(${response.statusText})`,\n        error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then(response => {\n      return response.json()\n    })\n    .then(body => {\n      setDeck(body)\n    })\n    .catch(error => console.error(`Error in fetch: ${error.message}`))\n  }, [])\n\n  let cards\n  if(deck.cards){\n  cards = (\n      <div>\n        <Card\n          key = {deck.cards[0].id}\n          id = {deck.cards[0].id}\n          value = {deck.cards[0].value}\n          suit = {deck.cards[0].suit}\n          image = {deck.cards[0].image}\n        />\n        <Card\n          key = {deck.cards[1].id}\n          id = {deck.cards[1].id}\n          value = {deck.cards[1].value}\n          suit = {deck.cards[1].suit}\n          image = {deck.cards[1].image}\n        />\n      </div>\n  )}\n\n  const drawCard = event => {\n    fetch(\"https://deckofcardsapi.com/api/deck/<<deck.deck_id>>/draw/?count=2\")\n    .then(response => response.json())\n    .then(response => console.log(response))\n  }\n\n  return(\n    <div>\n      <h1>Hello</h1>\n      {cards}\n      <Controls drawCard={drawCard} />\n    </div>\n  )\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}