{"ast":null,"code":"var _jsxFileName = \"/Users/samuelgrieve/Desktop/coding/war-card-game/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport cardSpread from '../img/card-spread.png';\nimport cardSpreadUpsideDown from '../img/card-spread-upside-down.png';\nimport cardSpace from '../img/card-space.png';\nimport { getValue } from '../helpers/helpers';\nimport spock from '../img/spock.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = props => {\n  _s();\n\n  let compCardCodes = \"\";\n  let userCardCodes = \"\";\n  const [deck, setDeck] = useState({});\n  const [compCardPlayed, setCompCardPlayed] = useState(null); // const [compCardFetchStarted, setCompCardFetchStarted] = useState(false)\n\n  const [userCardPlayed, setUserCardPlayed] = useState(null); // const [bothCardsPlayed, setBothCardsPlayed] = useState(false)\n\n  const [compCardsRemaining, setCompCardsRemaining] = useState(0);\n  const [userCardsRemaining, setUserCardsRemaining] = useState(0);\n  const [loadState, setLoadState] = useState(false); // Create/shuffle deck\n\n  useEffect(() => {\n    // if (loadState) return\n    // setLoadState = true\n    // SAM\n    // Start with design because it's more fun to work on something that looks nice\n    // ...\n    //TARWIN\n    // put second fetches into prior then\n    // Set load state false\n    // visual loader\n    // Show real number of cards\n    // Use animation to move cards || flip animation\n    // Hide everything until name is entered (cards)\n    // sam vs computer smaller\n    // play button nicer\n    // score nicer\n    // visual loader: spin circle over cards\n    // add catch to fetch that throws an error to user\n    // .finally (put load state inside this)\n    // Try vue.js\n    fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1').then(response => response.json()).then(deck => {\n      fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/draw/?count=52`).then(response => response.json()).then(drawn => {\n        let counter = 0;\n        drawn.cards.forEach(card => {\n          if (counter % 2 === 0) {\n            compCardCodes += `${card.code},`;\n            counter += 1;\n          } else {\n            userCardCodes += `${card.code},`;\n            counter += 1;\n          }\n        });\n        return drawn;\n      }) // Create two piles of 26 cards\n      .then(deck => {\n        fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/compPile/add/?cards=${compCardCodes}`).then(response => response.json()).then(pile => {\n          setDeck(pile);\n          setCompCardsRemaining(26);\n        });\n        return deck;\n      }).then(deck => {\n        fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/userPile/add/?cards=${userCardCodes}`).then(response => response.json()).then(pile => {\n          setDeck(pile);\n          setUserCardsRemaining(26);\n        });\n      });\n    }); // Get users name\n\n    if (document.getElementsByClassName(\"userName\")) {\n      let userNameInput = prompt(\"What's your name?\");\n\n      if (userNameInput === \"\") {\n        userNameInput = \"Unnamed Guest\";\n      }\n\n      let userNames = document.getElementsByClassName(\"userName\");\n\n      for (let i of userNames) {\n        i.innerHTML = userNameInput;\n      }\n    }\n  }, []); // // Computer plays first card\n  // useEffect( () => {\n  //   if(deck && deck.deck_id && !compCardPlayed && !compCardFetchStarted){\n  //     fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/compPile/draw/bottom/?count=1`)\n  //     .then(response => response.json())\n  //     .then(compCard => {\n  //       setCompCardPlayed(compCard.cards[0])\n  //       setDeck(compCard)\n  //     })\n  //     setCompCardFetchStarted(true)\n  //   }\n  // }, [deck, compCardPlayed])\n  // Plays cards\n\n  let playACard = event => {\n    if (deck && deck.deck_id) {\n      // Computer\n      fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/compPile/draw/bottom/?count=1`).then(response => response.json()).then(compCard => {\n        setCompCardPlayed(compCard.cards[0]);\n        setDeck(compCard);\n        return fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/userPile/draw/bottom/?count=1`);\n      }) // User\n      .then(response => response.json()).then(userCard => {\n        setUserCardPlayed(userCard.cards[0]);\n        setDeck(userCard);\n      });\n    }\n  }; // Determine who wins\n\n\n  useEffect(() => {\n    if (userCardPlayed && compCardPlayed) {\n      if (getValue(userCardPlayed.value) > getValue(compCardPlayed.value)) {\n        fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/userPile/add/?cards=${compCardPlayed.code}`).then(response => response.json()).then(data => {\n          setDeck(data);\n          setCompCardsRemaining(compCardsRemaining - 1);\n          setUserCardsRemaining(userCardsRemaining + 1);\n        });\n      } else if (getValue(userCardPlayed.value) < getValue(compCardPlayed.value)) {\n        setCompCardsRemaining(compCardsRemaining + 1);\n        setUserCardsRemaining(userCardsRemaining - 1);\n      } else {\n        console.log(\"WAR!\");\n      }\n    }\n  }, [userCardPlayed]); // const drawCard = event => {\n  //   if (deck.piles.userPile.remaining > 0) {\n  //     fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/draw/?count=2`)\n  //     .then(response => response.json())\n  //     .then(data => {\n  //       // User plays card\n  //       if(data.cards){\n  //         userCardPlayed.innerHTML = `<img src=${data.cards[0].image}></img>`\n  //         userCardPlayedValue = getValue(data.cards[0].value)\n  //       }\n  //       deck.remaining -= 1\n  //       // Decide who wins hand\n  //       if(userCardPlayedValue > compCardPlayedValue){\n  //         // User wins\n  //         // Add comp/user cards to users pile\n  //         userDiscardStack.innerHTML = `<img src=${data.cards[0].image}></img>`\n  //         // \n  //       } else if(userCardPlayedValue < compCardPlayedValue){\n  //           // Computer wins\n  //           console.log(\"You lose!\")\n  //       } else{\n  //           // War!\n  //           console.log(\"War!\")\n  //       }\n  //       // Comp plays new card\n  //       // setTimeout(function(){\n  //       //   compCardPlayed.innerHTML = `<img src=${card.cards[0].image}></img>`\n  //       //   compCardPlayedValue = getValue(card.cards[0].value)\n  //       // }\n  //       // , 2000)\n  //     })\n  //   }else{\n  //     userCardPlayed.innerHTML = \"Out of cards\"\n  //   }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-x\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell medium-4 black-bg cell-padding-top lefty\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell medium-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              id: \"ship\",\n              src: spock\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 46\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 43\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"War: Star Trek Edition\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 83\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 114\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell medium-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Computer\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 25\n            }, this), \"vs\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 36\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"userName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Score:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 16\n            }, this), \" \\xA0\\xA0\\xA0\\xA0 Computer: 0 \\xA0\\xA0\\xA0\\xA0 \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"userName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 92\n            }, this), \": 0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell medium-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            id: \"playACard\",\n            onClick: playACard,\n            children: \"Play a card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"(You can also click on your deck to play a card)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell medium-8 table-bg righty\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-x\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cell medium-12 compCards\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-x\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-10\",\n                id: \"comp-card-stack\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: cardSpreadUpsideDown\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cell medium-12 cardsPlayed\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-x t-user-vs-comp\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-3 cardNumbers\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-3\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-played\",\n                  id: \"comp-card-played\",\n                  children: [compCardPlayed ? /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: compCardPlayed.image\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 227,\n                    columnNumber: 39\n                  }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: cardSpace\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 227,\n                    columnNumber: 80\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Computer\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 228,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-3\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-played\",\n                  id: \"user-card-played\",\n                  children: [userCardPlayed ? /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: userCardPlayed.image\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 233,\n                    columnNumber: 39\n                  }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: cardSpace\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 233,\n                    columnNumber: 80\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"userName\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 234,\n                      columnNumber: 24\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 234,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cell medium-12 userCards\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-x\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-12\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Computer has \", /*#__PURE__*/_jsxDEV(\"b\", {\n                    children: [compCardsRemaining, \" Cards\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 245,\n                    columnNumber: 35\n                  }, this), \" | \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"userName\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 245,\n                    columnNumber: 71\n                  }, this), \" has \", /*#__PURE__*/_jsxDEV(\"b\", {\n                    children: [userCardsRemaining, \" Cards\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 245,\n                    columnNumber: 110\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-10\",\n                id: \"user-card-stack\",\n                onClick: playACard,\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: cardSpread\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 249,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"dB5bh45ADXKJ5d/NNrtHaQ/lwtU=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/samuelgrieve/Desktop/coding/war-card-game/src/components/Game.js"],"names":["React","useState","useEffect","cardSpread","cardSpreadUpsideDown","cardSpace","getValue","spock","Game","props","compCardCodes","userCardCodes","deck","setDeck","compCardPlayed","setCompCardPlayed","userCardPlayed","setUserCardPlayed","compCardsRemaining","setCompCardsRemaining","userCardsRemaining","setUserCardsRemaining","loadState","setLoadState","fetch","then","response","json","deck_id","drawn","counter","cards","forEach","card","code","pile","document","getElementsByClassName","userNameInput","prompt","userNames","i","innerHTML","playACard","event","compCard","userCard","value","data","console","log","image"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport cardSpread from '../img/card-spread.png'\nimport cardSpreadUpsideDown from '../img/card-spread-upside-down.png'\nimport cardSpace from '../img/card-space.png'\nimport { getValue } from '../helpers/helpers'\nimport spock from '../img/spock.png'\n\nconst Game = (props) => {\n  let compCardCodes = \"\"\n  let userCardCodes = \"\"\n\n  const [deck, setDeck] = useState({})\n  const [compCardPlayed, setCompCardPlayed] = useState(null)\n  // const [compCardFetchStarted, setCompCardFetchStarted] = useState(false)\n  const [userCardPlayed, setUserCardPlayed] = useState(null)\n  // const [bothCardsPlayed, setBothCardsPlayed] = useState(false)\n  const [compCardsRemaining, setCompCardsRemaining] = useState(0)\n  const [userCardsRemaining, setUserCardsRemaining] = useState(0)\n\n  const [loadState, setLoadState] = useState(false)\n\n\n\n  // Create/shuffle deck\n  useEffect( () => {\n    // if (loadState) return\n    // setLoadState = true\n    // SAM\n    // Start with design because it's more fun to work on something that looks nice\n    // ...\n\n\n    //TARWIN\n    // put second fetches into prior then\n    // Set load state false\n    // visual loader\n    // Show real number of cards\n    // Use animation to move cards || flip animation\n    // Hide everything until name is entered (cards)\n    // sam vs computer smaller\n    // play button nicer\n    // score nicer\n    // visual loader: spin circle over cards\n    // add catch to fetch that throws an error to user\n    // .finally (put load state inside this)\n    // Try vue.js\n    fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1')\n    .then(response => response.json())\n    .then(deck => {\n      fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/draw/?count=52`)\n      .then(response => response.json())\n      .then(drawn => {\n        let counter = 0\n        drawn.cards.forEach(card => {\n          if(counter % 2 === 0){\n            compCardCodes += `${card.code},`\n            counter += 1\n          } else{\n            userCardCodes += `${card.code},`\n            counter += 1\n          }\n        })\n        return drawn\n      })\n      // Create two piles of 26 cards\n      .then(deck => {\n        fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/compPile/add/?cards=${compCardCodes}`)\n        .then(response => response.json())\n        .then(pile => {\n          setDeck(pile)\n          setCompCardsRemaining(26)\n        })\n        return deck\n      })\n      .then(deck => {\n        fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/userPile/add/?cards=${userCardCodes}`)\n        .then(response => response.json())\n        .then(pile => {\n          setDeck(pile)\n          setUserCardsRemaining(26)\n        })\n      }) \n    })\n\n    // Get users name\n    if(document.getElementsByClassName(\"userName\")){\n      let userNameInput = prompt(\"What's your name?\")\n      if(userNameInput === \"\"){\n        userNameInput = \"Unnamed Guest\"\n      }\n      let userNames = document.getElementsByClassName(\"userName\")\n      for(let i of userNames){\n        i.innerHTML = userNameInput\n      }\n    }\n  }, [])\n\n  // // Computer plays first card\n  // useEffect( () => {\n  //   if(deck && deck.deck_id && !compCardPlayed && !compCardFetchStarted){\n  //     fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/compPile/draw/bottom/?count=1`)\n  //     .then(response => response.json())\n  //     .then(compCard => {\n  //       setCompCardPlayed(compCard.cards[0])\n  //       setDeck(compCard)\n  //     })\n  //     setCompCardFetchStarted(true)\n  //   }\n  // }, [deck, compCardPlayed])\n\n  // Plays cards\n  let playACard = event => {\n    if(deck && deck.deck_id){\n      // Computer\n      fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/compPile/draw/bottom/?count=1`)\n      .then(response => response.json())\n      .then(compCard => {\n        setCompCardPlayed(compCard.cards[0])\n        setDeck(compCard)\n        return fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/userPile/draw/bottom/?count=1`)\n      })\n      // User\n      .then(response => response.json())\n      .then(userCard => {\n        setUserCardPlayed(userCard.cards[0])\n        setDeck(userCard)\n      })\n    }\n  }\n\n  // Determine who wins\n  useEffect( () => {\n    if(userCardPlayed && compCardPlayed){\n      if(getValue(userCardPlayed.value) > getValue(compCardPlayed.value)){\n        fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/userPile/add/?cards=${compCardPlayed.code}`)\n        .then(response => response.json())\n        .then(data => {\n          setDeck(data)\n          setCompCardsRemaining(compCardsRemaining - 1)\n          setUserCardsRemaining(userCardsRemaining + 1)\n        })\n\n      } else if(getValue(userCardPlayed.value) < getValue(compCardPlayed.value)){\n        setCompCardsRemaining(compCardsRemaining + 1)\n        setUserCardsRemaining(userCardsRemaining - 1)\n      } else{\n        console.log(\"WAR!\")\n      }\n    }\n  }, [userCardPlayed])\n\n  // const drawCard = event => {\n  //   if (deck.piles.userPile.remaining > 0) {\n  //     fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/draw/?count=2`)\n  //     .then(response => response.json())\n  //     .then(data => {\n\n  //       // User plays card\n  //       if(data.cards){\n  //         userCardPlayed.innerHTML = `<img src=${data.cards[0].image}></img>`\n  //         userCardPlayedValue = getValue(data.cards[0].value)\n  //       }\n  //       deck.remaining -= 1\n\n  //       // Decide who wins hand\n  //       if(userCardPlayedValue > compCardPlayedValue){\n  //         // User wins\n  //         // Add comp/user cards to users pile\n  //         userDiscardStack.innerHTML = `<img src=${data.cards[0].image}></img>`\n  //         // \n  //       } else if(userCardPlayedValue < compCardPlayedValue){\n  //           // Computer wins\n  //           console.log(\"You lose!\")\n  //       } else{\n  //           // War!\n  //           console.log(\"War!\")\n  //       }\n\n  //       // Comp plays new card\n  //       // setTimeout(function(){\n  //       //   compCardPlayed.innerHTML = `<img src=${card.cards[0].image}></img>`\n  //       //   compCardPlayedValue = getValue(card.cards[0].value)\n  //       // }\n  //       // , 2000)\n  //     })\n  //   }else{\n  //     userCardPlayed.innerHTML = \"Out of cards\"\n  //   }\n  // }\n\n  return(\n    <div>\n      <div className=\"grid-x\">\n\n        <div className=\"cell medium-4 black-bg cell-padding-top lefty\">\n          <div className=\"cell medium-12\"><p><img id=\"ship\" src={spock}></img></p><h3>War: Star Trek Edition</h3><br></br></div>\n          <div className=\"cell medium-12\">\n            <h1>Computer<br></br>vs<br></br><span className=\"userName\"></span></h1>\n            <br></br>\n            <p><b>Score:</b> &nbsp;&nbsp;&nbsp;&nbsp; Computer: 0 &nbsp;&nbsp;&nbsp;&nbsp; <span className=\"userName\"></span>: 0</p>\n            <br></br>\n          </div>\n          <div className=\"cell medium-12\">\n            <button className=\"button\" id=\"playACard\" onClick={playACard}>Play a card</button>\n            <p>(You can also click on your deck to play a card)</p>\n          </div>\n        </div>\n\n        <div className=\"cell medium-8 table-bg righty\">\n          <div className=\"grid-x\">\n            \n            <div className=\"cell medium-12 compCards\">\n              <div className=\"grid-x\">\n                <div className=\"cell medium-2\"></div>\n                <div className=\"cell medium-10\" id=\"comp-card-stack\">\n                  <img src={cardSpreadUpsideDown}></img>\n                </div>\n                {/* <div className=\"cell medium-6 card-stack rotate-left\" id=\"comp-discard-stack\"></div> */}\n              </div>\n            </div>\n            \n            <div className=\"cell medium-12 cardsPlayed\">\n              <div className=\"grid-x t-user-vs-comp\">\n                <div className=\"cell medium-3 cardNumbers\"></div>\n                <div className=\"cell medium-3\">\n                  <div className=\"card-played\" id=\"comp-card-played\">\n                    {compCardPlayed ? <img src={compCardPlayed.image}></img> : <img src={cardSpace}></img>}\n                    <p>Computer</p>\n                  </div>\n                </div>\n                <div className=\"cell medium-3\">\n                  <div className=\"card-played\" id=\"user-card-played\">\n                    {userCardPlayed ? <img src={userCardPlayed.image}></img> : <img src={cardSpace}></img>}\n                    <p><span className=\"userName\"></span></p>\n                  </div>\n                </div>\n                <div className=\"cell medium-3\"></div>\n              </div>\n            </div>\n\n            <div className=\"cell medium-12 userCards\">\n              <div className=\"grid-x\">\n                {/* <div className=\"cell medium-6 card-stack rotate-left\" id=\"user-discard-stack\"></div> */}\n                <div className=\"cell medium-12\">\n                  <p>Computer has <b>{compCardsRemaining} Cards</b> | <span className=\"userName\"></span> has <b>{userCardsRemaining} Cards</b></p>\n                </div>\n                <div className=\"cell medium-10\" id=\"user-card-stack\" onClick={playACard}>\n                  {/* <img src={backOfCard}></img> */}\n                  <img src={cardSpread}></img>\n                </div>\n                <div className=\"cell medium-2\"></div>\n              </div>\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    </div>\n  )\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}