{"ast":null,"code":"var _jsxFileName = \"/Users/samuelgrieve/Desktop/coding/war-card-game/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport Controls from './Controls';\nimport logo from '../img/back-of-card.png';\nimport { LOGICAL_OPERATORS } from '@babel/types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = props => {\n  _s();\n\n  const [deck, setDeck] = useState([]);\n  useEffect(() => {\n    fetch(\"https://deckofcardsapi.com/api/deck/new/draw/?count=52\").then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let errorMessage = `${response.status}(${response.statusText})`,\n            error = new Error(errorMessage);\n        throw error;\n      }\n    }).then(response => {\n      return response.json();\n    }).then(body => {\n      setDeck(body);\n    }).catch(error => console.error(`Error in fetch: ${error.message}`));\n  }, []);\n  let cards;\n\n  if (deck.cards) {\n    cards = deck.cards.map(card => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        id: card.id,\n        value: card.value,\n        suit: card.suit,\n        image: card.image\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this);\n    });\n  } // const drawCard = event => {\n  //   fetch(\"https://deckofcardsapi.com/api/deck/<<deck.deck_id>>/draw/?count=2\")\n  //   .then(response => response.json())\n  //   .then(response => console.log(response))\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"card-stack\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"card-played\",\n      children: cards\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"NGuX+IhPEoaYDnAUn9U4qFBy9U0=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/samuelgrieve/Desktop/coding/war-card-game/src/components/Game.js"],"names":["React","useState","useEffect","Card","Controls","logo","LOGICAL_OPERATORS","Game","props","deck","setDeck","fetch","then","response","ok","errorMessage","status","statusText","error","Error","json","body","catch","console","message","cards","map","card","id","value","suit","image"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,SAASC,iBAAT,QAAkC,cAAlC;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAE,MAAM;AACfS,IAAAA,KAAK,CAAC,wDAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAI;AAChB,UAAGA,QAAQ,CAACC,EAAZ,EAAe;AACb,eAAOD,QAAP;AACD,OAFD,MAEM;AACJ,YAAIE,YAAY,GAAI,GAAEF,QAAQ,CAACG,MAAO,IAAGH,QAAQ,CAACI,UAAW,GAA7D;AAAA,YACAC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAV,CADR;AAEA,cAAMG,KAAN;AACD;AACF,KATD,EAUCN,IAVD,CAUMC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACO,IAAT,EAAP;AACD,KAZD,EAaCR,IAbD,CAaMS,IAAI,IAAI;AACZX,MAAAA,OAAO,CAACW,IAAD,CAAP;AACD,KAfD,EAgBCC,KAhBD,CAgBOJ,KAAK,IAAIK,OAAO,CAACL,KAAR,CAAe,mBAAkBA,KAAK,CAACM,OAAQ,EAA/C,CAhBhB;AAiBD,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,MAAIC,KAAJ;;AAEA,MAAIhB,IAAI,CAACgB,KAAT,EAAgB;AACdA,IAAAA,KAAK,GAAGhB,IAAI,CAACgB,KAAL,CAAWC,GAAX,CAAgBC,IAAD,IAAU;AAC/B,0BACE,QAAC,IAAD;AAEE,QAAA,EAAE,EAAIA,IAAI,CAACC,EAFb;AAGE,QAAA,KAAK,EAAID,IAAI,CAACE,KAHhB;AAIE,QAAA,IAAI,EAAIF,IAAI,CAACG,IAJf;AAKE,QAAA,KAAK,EAAIH,IAAI,CAACI;AALhB,SACSJ,IAAI,CAACC,EADd;AAAA;AAAA;AAAA;AAAA,cADF;AASD,KAVO,CAAR;AAWD,GArCqB,CAuCtB;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAA,4BACE;AAAK,MAAA,EAAE,EAAC,YAAR;AAAA,6BACE;AAAK,QAAA,GAAG,EAAEvB;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,EAAE,EAAC,aAAR;AAAA,gBACGoB;AADH;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAxDD;;GAAMlB,I;;KAAAA,I;AA0DN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Card from './Card'\nimport Controls from './Controls'\nimport logo from '../img/back-of-card.png'\nimport { LOGICAL_OPERATORS } from '@babel/types'\n\nconst Game = (props) => {\n  const [deck, setDeck] = useState([])\n\n  useEffect( () => {\n    fetch(\"https://deckofcardsapi.com/api/deck/new/draw/?count=52\")\n    .then(response => {\n      if(response.ok){\n        return response\n      } else{\n        let errorMessage = `${response.status}(${response.statusText})`,\n        error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then(response => {\n      return response.json()\n    })\n    .then(body => {\n      setDeck(body)\n    })\n    .catch(error => console.error(`Error in fetch: ${error.message}`))\n  }, [])\n\n  let cards\n\n  if (deck.cards) {\n    cards = deck.cards.map((card) => {\n      return(\n        <Card\n          key = {card.id}\n          id = {card.id}\n          value = {card.value}\n          suit = {card.suit}\n          image = {card.image}\n        />\n      )\n    })\n  }\n\n  // const drawCard = event => {\n  //   fetch(\"https://deckofcardsapi.com/api/deck/<<deck.deck_id>>/draw/?count=2\")\n  //   .then(response => response.json())\n  //   .then(response => console.log(response))\n  // }\n\n  return(\n    <div>\n      <div id=\"card-stack\">\n        <img src={logo}></img>\n      </div>\n      <div id=\"card-played\">\n        {cards}\n      </div>\n      {/* <Controls drawCard={drawCard} /> */}\n    </div>\n  )\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}