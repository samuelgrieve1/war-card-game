{"ast":null,"code":"var _jsxFileName = \"/Users/samuelgrieve/Desktop/coding/war/src/components/CardDeck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardDeck = props => {\n  _s();\n\n  const [deck, setDeck] = useState({});\n  useEffect(() => {\n    fetch(\"https://deckofcardsapi.com/api/deck/new/draw/?count=2\").then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let errorMessage = `${response.status}(${response.statusText})`,\n            error = new Error(errorMessage);\n        throw error;\n      }\n    }).then(response => {\n      return response.json();\n    }).then(body => {\n      setDeck(body);\n    }).catch(error => console.error(`Error in fetch: ${error.message}`));\n  }, []);\n  let cards = Object.fromEntries(Object.entries(deck).map(([k, v]) => [k, v * v])); // let cards = Object.keys(deck).forEach(key =>{\n  //   if(key === \"cards\"){\n  //     for(let i = 0; i < deck.cards.length; i++){\n  //       // console.log(deck.cards[i].value)\n  //       return(\n  //         <Card\n  //           key = {deck.cards[i].id}\n  //           id = {deck.cards[i].id}\n  //           value = {deck.cards[i].value}\n  //           suit = {deck.cards[i].suit}\n  //         />\n  //       )\n  //     }\n  //   }\n  // })\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), cards]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardDeck, \"lRN72Jn4Cfrh8w5aqHHHGLhGRHY=\");\n\n_c = CardDeck;\nexport default CardDeck;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardDeck\");","map":{"version":3,"sources":["/Users/samuelgrieve/Desktop/coding/war/src/components/CardDeck.js"],"names":["React","useState","useEffect","Card","CardDeck","props","deck","setDeck","fetch","then","response","ok","errorMessage","status","statusText","error","Error","json","body","catch","console","message","cards","Object","fromEntries","entries","map","k","v"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAE,MAAM;AACfM,IAAAA,KAAK,CAAC,uDAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAI;AAChB,UAAGA,QAAQ,CAACC,EAAZ,EAAe;AACb,eAAOD,QAAP;AACD,OAFD,MAEM;AACJ,YAAIE,YAAY,GAAI,GAAEF,QAAQ,CAACG,MAAO,IAAGH,QAAQ,CAACI,UAAW,GAA7D;AAAA,YACAC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAV,CADR;AAEA,cAAMG,KAAN;AACD;AACF,KATD,EAUCN,IAVD,CAUMC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACO,IAAT,EAAP;AACD,KAZD,EAaCR,IAbD,CAaMS,IAAI,IAAI;AACZX,MAAAA,OAAO,CAACW,IAAD,CAAP;AACD,KAfD,EAgBCC,KAhBD,CAgBOJ,KAAK,IAAIK,OAAO,CAACL,KAAR,CAAe,mBAAkBA,KAAK,CAACM,OAAQ,EAA/C,CAhBhB;AAiBD,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,MAAIC,KAAK,GAAGC,MAAM,CAACC,WAAP,CAAmBD,MAAM,CAACE,OAAP,CAAenB,IAAf,EAAqBoB,GAArB,CAAyB,CAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,KAAY,CAACD,CAAD,EAAIC,CAAC,GAAGA,CAAR,CAArC,CAAnB,CAAZ,CAvB0B,CA0B1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGN,KAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAhDD;;GAAMlB,Q;;KAAAA,Q;AAkDN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Card from './Card'\n\nconst CardDeck = (props) => {\n  const [deck, setDeck] = useState({})\n\n  useEffect( () => {\n    fetch(\"https://deckofcardsapi.com/api/deck/new/draw/?count=2\")\n    .then(response => {\n      if(response.ok){\n        return response\n      } else{\n        let errorMessage = `${response.status}(${response.statusText})`,\n        error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then(response => {\n      return response.json()\n    })\n    .then(body => {\n      setDeck(body)\n    })\n    .catch(error => console.error(`Error in fetch: ${error.message}`))\n  }, [])\n\n  let cards = Object.fromEntries(Object.entries(deck).map(([k, v]) => [k, v * v]));\n\n\n  // let cards = Object.keys(deck).forEach(key =>{\n  //   if(key === \"cards\"){\n  //     for(let i = 0; i < deck.cards.length; i++){\n  //       // console.log(deck.cards[i].value)\n  //       return(\n  //         <Card\n  //           key = {deck.cards[i].id}\n  //           id = {deck.cards[i].id}\n  //           value = {deck.cards[i].value}\n  //           suit = {deck.cards[i].suit}\n  //         />\n  //       )\n  //     }\n  //   }\n  // })\n\n  return(\n    <div>\n      <h1>Hello</h1>\n      {cards}\n    </div>\n  )\n}\n\nexport default CardDeck"]},"metadata":{},"sourceType":"module"}