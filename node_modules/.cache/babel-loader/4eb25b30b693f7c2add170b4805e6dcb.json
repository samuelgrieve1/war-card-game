{"ast":null,"code":"var _jsxFileName = \"/Users/samuelgrieve/Desktop/coding/war-card-game/src/components/Game.js\",\n    _s = $RefreshSig$();\n\n// Import React\nimport React, { useState, useEffect } from 'react'; // Get Helpers\n\nimport { getValue } from '../helpers/helpers'; // Get Images\n\nimport cardSpread from '../img/card-spread.png';\nimport cardSpreadUpsideDown from '../img/card-spread-upside-down.png';\nimport cardSpace from '../img/card-space.png';\nimport logo from '../img/logo.png'; // Initialize Game\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = props => {\n  _s();\n\n  // Declare Variables as Empty Strings\n  let compCardCodes = \"\";\n  let userCardCodes = \"\"; // Declare Constant Variables\n\n  const [deck, setDeck] = useState({});\n  const [compCardPlayed, setCompCardPlayed] = useState(null); // const [compCardFetchStarted, setCompCardFetchStarted] = useState(false)\n\n  const [userCardPlayed, setUserCardPlayed] = useState(null); // const [bothCardsPlayed, setBothCardsPlayed] = useState(false)\n\n  const [compCardsRemaining, setCompCardsRemaining] = useState(0);\n  const [userCardsRemaining, setUserCardsRemaining] = useState(0);\n  const [loadState, setLoadState] = useState(false); // TODO\n  // put second fetches into prior then (It looks like maybe thise has already been done on lines 56 - 92?)\n  // visual loader\n  // Show real number of cards\n  // Use animation to move cards || flip animation\n  // Hide everything until name is entered (cards)\n  // sam vs computer smaller\n  // play button nicer\n  // visual loader: spin circle over cards\n  // Try vue.js\n  // DONE\n  // score nicer\n  // if (loadState) return\n  // setLoadState = true\n  // Set load state false\n  // add catch to fetch that throws an error to user\n  // .finally (put load state inside this)\n  // Start Game\n  // Create/shuffle deck\n\n  let startGame = event => {\n    document.getElementById('startGame').classList.add('hidden');\n    document.getElementById('playACard').classList.remove('hidden');\n    fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1').then(response => response.json()).then(deck => {\n      fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/draw/?count=52`).then(response => response.json()).then(drawn => {\n        let counter = 0;\n        drawn.cards.forEach(card => {\n          if (counter % 2 === 0) {\n            compCardCodes += `${card.code},`;\n            counter += 1;\n          } else {\n            userCardCodes += `${card.code},`;\n            counter += 1;\n          }\n        });\n        return drawn;\n      }) // Create two piles of 26 cards\n      .then(deck => {\n        fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/compPile/add/?cards=${compCardCodes}`).then(response => response.json()).then(pile => {\n          setDeck(pile);\n          setCompCardsRemaining(26);\n        });\n        return deck;\n      }).then(deck => {\n        fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/userPile/add/?cards=${userCardCodes}`).then(response => response.json()).then(pile => {\n          setDeck(pile);\n          setUserCardsRemaining(26);\n        });\n      });\n    }); // Get users name\n\n    if (document.getElementsByClassName(\"userName\")) {\n      let userNameInput = prompt(\"What's your name?\");\n\n      if (userNameInput === \"\") {\n        userNameInput = \"Unnamed Guest\";\n      }\n\n      let userNames = document.getElementsByClassName(\"userName\");\n\n      for (let i of userNames) {\n        i.innerHTML = userNameInput;\n      }\n    }\n  }; // // Computer plays first card\n  // useEffect( () => {\n  //   if(deck && deck.deck_id && !compCardPlayed && !compCardFetchStarted){\n  //     fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/compPile/draw/bottom/?count=1`)\n  //     .then(response => response.json())\n  //     .then(compCard => {\n  //       setCompCardPlayed(compCard.cards[0])\n  //       setDeck(compCard)\n  //     })\n  //     setCompCardFetchStarted(true)\n  //   }\n  // }, [deck, compCardPlayed])\n  // Plays cards\n\n\n  let playACard = event => {\n    if (deck && deck.deck_id && !loadState) {\n      setLoadState(true); // Computer\n\n      fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/compPile/draw/bottom/?count=1`).then(response => response.json()).then(compCard => {\n        setCompCardPlayed(compCard.cards[0]);\n        setDeck(compCard);\n        return fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/userPile/draw/bottom/?count=1`);\n      }) // User\n      .then(response => response.json()).then(userCard => {\n        setUserCardPlayed(userCard.cards[0]);\n        setDeck(userCard);\n      }).catch(() => {\n        alert(\"The promise has been broken!\");\n      }).finally(setLoadState(false));\n    }\n  }; // Determine who wins\n\n\n  useEffect(() => {\n    if (userCardPlayed && compCardPlayed) {\n      if (getValue(userCardPlayed.value) > getValue(compCardPlayed.value)) {\n        fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/userPile/add/?cards=${compCardPlayed.code}`).then(response => response.json()).then(data => {\n          setDeck(data);\n          setCompCardsRemaining(compCardsRemaining - 1);\n          setUserCardsRemaining(userCardsRemaining + 1);\n        });\n      } else if (getValue(userCardPlayed.value) < getValue(compCardPlayed.value)) {\n        setCompCardsRemaining(compCardsRemaining + 1);\n        setUserCardsRemaining(userCardsRemaining - 1);\n      } else {\n        console.log(\"WAR!\");\n      }\n    }\n  }, [userCardPlayed]); // const drawCard = event => {\n  //   if (deck.piles.userPile.remaining > 0) {\n  //     fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/draw/?count=2`)\n  //     .then(response => response.json())\n  //     .then(data => {\n  //       // User plays card\n  //       if(data.cards){\n  //         userCardPlayed.innerHTML = `<img src=${data.cards[0].image}></img>`\n  //         userCardPlayedValue = getValue(data.cards[0].value)\n  //       }\n  //       deck.remaining -= 1\n  //       // Decide who wins hand\n  //       if(userCardPlayedValue > compCardPlayedValue){\n  //         // User wins\n  //         // Add comp/user cards to users pile\n  //         userDiscardStack.innerHTML = `<img src=${data.cards[0].image}></img>`\n  //         // \n  //       } else if(userCardPlayedValue < compCardPlayedValue){\n  //           // Computer wins\n  //           console.log(\"You lose!\")\n  //       } else{\n  //           // War!\n  //           console.log(\"War!\")\n  //       }\n  //       // Comp plays new card\n  //       // setTimeout(function(){\n  //       //   compCardPlayed.innerHTML = `<img src=${card.cards[0].image}></img>`\n  //       //   compCardPlayedValue = getValue(card.cards[0].value)\n  //       // }\n  //       // , 2000)\n  //     })\n  //   }else{\n  //     userCardPlayed.innerHTML = \"Out of cards\"\n  //   }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-x\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell medium-4 black-bg cell-padding-top lefty\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell medium-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              id: \"ship\",\n              src: logo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 46\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 43\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 82\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell medium-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"t-user-vs-comp\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: [\"Computer vs. \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"userName\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 32\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell medium-12\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"t-score-board\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"t-score-big\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Score\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"t-score-small\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Computer: 0\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"userName\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 38\n                }, this), \": 0\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell medium-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            id: \"startGame\",\n            onClick: startGame,\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button hidden\",\n            id: \"playACard\",\n            onClick: playACard,\n            children: \"Play a card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell medium-8 table-bg righty\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-x\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cell medium-12 compCards\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-x\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-10\",\n                id: \"comp-card-stack\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: cardSpreadUpsideDown\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cell medium-12 cardsPlayed\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-x\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-3 cardNumbers\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-3\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-played\",\n                  id: \"comp-card-played\",\n                  children: [compCardPlayed ? /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: compCardPlayed.image\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 39\n                  }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: cardSpace\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 80\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Computer\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 255,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-3\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-played\",\n                  id: \"user-card-played\",\n                  children: [userCardPlayed ? /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: userCardPlayed.image\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 260,\n                    columnNumber: 39\n                  }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: cardSpace\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 260,\n                    columnNumber: 80\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"userName\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 261,\n                      columnNumber: 24\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 261,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cell medium-12 userCards\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-x\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-12\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Computer has \", /*#__PURE__*/_jsxDEV(\"b\", {\n                    children: [compCardsRemaining, \" Cards\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 35\n                  }, this), \" | \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"userName\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 71\n                  }, this), \" has \", /*#__PURE__*/_jsxDEV(\"b\", {\n                    children: [userCardsRemaining, \" Cards\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 110\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-10\",\n                id: \"user-card-stack\",\n                onClick: playACard,\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: cardSpread\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 276,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell medium-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"qgAdnNN1NAysOeTnw83eHAQC93w=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/samuelgrieve/Desktop/coding/war-card-game/src/components/Game.js"],"names":["React","useState","useEffect","getValue","cardSpread","cardSpreadUpsideDown","cardSpace","logo","Game","props","compCardCodes","userCardCodes","deck","setDeck","compCardPlayed","setCompCardPlayed","userCardPlayed","setUserCardPlayed","compCardsRemaining","setCompCardsRemaining","userCardsRemaining","setUserCardsRemaining","loadState","setLoadState","startGame","event","document","getElementById","classList","add","remove","fetch","then","response","json","deck_id","drawn","counter","cards","forEach","card","code","pile","getElementsByClassName","userNameInput","prompt","userNames","i","innerHTML","playACard","compCard","userCard","catch","alert","finally","value","data","console","log","image"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;AACA,SAASC,QAAT,QAAyB,oBAAzB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,oBAAP,MAAiC,oCAAjC;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,iBAAjB,C,CAEA;;;;AACA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AAEtB;AACA,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIC,aAAa,GAAG,EAApB,CAJsB,CAMtB;;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACa,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAAC,IAAD,CAApD,CARsB,CAStB;;AACA,QAAM,CAACe,cAAD,EAAiBC,iBAAjB,IAAsChB,QAAQ,CAAC,IAAD,CAApD,CAVsB,CAWtB;;AACA,QAAM,CAACiB,kBAAD,EAAqBC,qBAArB,IAA8ClB,QAAQ,CAAC,CAAD,CAA5D;AACA,QAAM,CAACmB,kBAAD,EAAqBC,qBAArB,IAA8CpB,QAAQ,CAAC,CAAD,CAA5D;AAEA,QAAM,CAACqB,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,KAAD,CAA1C,CAfsB,CAiBpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGF;AACA;;AACA,MAAIuB,SAAS,GAAGC,KAAK,IAAI;AACvBC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,SAArC,CAA+CC,GAA/C,CAAmD,QAAnD;AACAH,IAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,SAArC,CAA+CE,MAA/C,CAAsD,QAAtD;AACAC,IAAAA,KAAK,CAAC,+DAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMpB,IAAI,IAAI;AACZmB,MAAAA,KAAK,CAAE,uCAAsCnB,IAAI,CAACuB,OAAQ,iBAArD,CAAL,CACCH,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMI,KAAK,IAAI;AACb,YAAIC,OAAO,GAAG,CAAd;AACAD,QAAAA,KAAK,CAACE,KAAN,CAAYC,OAAZ,CAAoBC,IAAI,IAAI;AAC1B,cAAGH,OAAO,GAAG,CAAV,KAAgB,CAAnB,EAAqB;AACnB3B,YAAAA,aAAa,IAAK,GAAE8B,IAAI,CAACC,IAAK,GAA9B;AACAJ,YAAAA,OAAO,IAAI,CAAX;AACD,WAHD,MAGM;AACJ1B,YAAAA,aAAa,IAAK,GAAE6B,IAAI,CAACC,IAAK,GAA9B;AACAJ,YAAAA,OAAO,IAAI,CAAX;AACD;AACF,SARD;AASA,eAAOD,KAAP;AACD,OAdD,EAeA;AAfA,OAgBCJ,IAhBD,CAgBMpB,IAAI,IAAI;AACZmB,QAAAA,KAAK,CAAE,uCAAsCnB,IAAI,CAACuB,OAAQ,6BAA4BzB,aAAc,EAA/F,CAAL,CACCsB,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMU,IAAI,IAAI;AACZ7B,UAAAA,OAAO,CAAC6B,IAAD,CAAP;AACAvB,UAAAA,qBAAqB,CAAC,EAAD,CAArB;AACD,SALD;AAMA,eAAOP,IAAP;AACD,OAxBD,EAyBCoB,IAzBD,CAyBMpB,IAAI,IAAI;AACZmB,QAAAA,KAAK,CAAE,uCAAsCnB,IAAI,CAACuB,OAAQ,6BAA4BxB,aAAc,EAA/F,CAAL,CACCqB,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMU,IAAI,IAAI;AACZ7B,UAAAA,OAAO,CAAC6B,IAAD,CAAP;AACArB,UAAAA,qBAAqB,CAAC,EAAD,CAArB;AACD,SALD;AAMD,OAhCD;AAiCD,KApCD,EAHuB,CAyCvB;;AACA,QAAGK,QAAQ,CAACiB,sBAAT,CAAgC,UAAhC,CAAH,EAA+C;AAC7C,UAAIC,aAAa,GAAGC,MAAM,CAAC,mBAAD,CAA1B;;AACA,UAAGD,aAAa,KAAK,EAArB,EAAwB;AACtBA,QAAAA,aAAa,GAAG,eAAhB;AACD;;AACD,UAAIE,SAAS,GAAGpB,QAAQ,CAACiB,sBAAT,CAAgC,UAAhC,CAAhB;;AACA,WAAI,IAAII,CAAR,IAAaD,SAAb,EAAuB;AACrBC,QAAAA,CAAC,CAACC,SAAF,GAAcJ,aAAd;AACD;AACF;AACF,GApDD,CAvCsB,CA6FtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,MAAIK,SAAS,GAAGxB,KAAK,IAAI;AACvB,QAAGb,IAAI,IAAIA,IAAI,CAACuB,OAAb,IAAwB,CAACb,SAA5B,EAAsC;AACpCC,MAAAA,YAAY,CAAC,IAAD,CAAZ,CADoC,CAEpC;;AACAQ,MAAAA,KAAK,CAAE,uCAAsCnB,IAAI,CAACuB,OAAQ,qCAArD,CAAL,CACCH,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMkB,QAAQ,IAAI;AAChBnC,QAAAA,iBAAiB,CAACmC,QAAQ,CAACZ,KAAT,CAAe,CAAf,CAAD,CAAjB;AACAzB,QAAAA,OAAO,CAACqC,QAAD,CAAP;AACA,eAAOnB,KAAK,CAAE,uCAAsCnB,IAAI,CAACuB,OAAQ,qCAArD,CAAZ;AACD,OAND,EAOA;AAPA,OAQCH,IARD,CAQMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARlB,EASCF,IATD,CASMmB,QAAQ,IAAI;AAChBlC,QAAAA,iBAAiB,CAACkC,QAAQ,CAACb,KAAT,CAAe,CAAf,CAAD,CAAjB;AACAzB,QAAAA,OAAO,CAACsC,QAAD,CAAP;AACD,OAZD,EAaCC,KAbD,CAaO,MAAM;AAACC,QAAAA,KAAK,CAAC,8BAAD,CAAL;AAAsC,OAbpD,EAcCC,OAdD,CAeE/B,YAAY,CAAC,KAAD,CAfd;AAiBD;AACF,GAtBD,CA3GsB,CAmItB;;;AACArB,EAAAA,SAAS,CAAE,MAAM;AACf,QAAGc,cAAc,IAAIF,cAArB,EAAoC;AAClC,UAAGX,QAAQ,CAACa,cAAc,CAACuC,KAAhB,CAAR,GAAiCpD,QAAQ,CAACW,cAAc,CAACyC,KAAhB,CAA5C,EAAmE;AACjExB,QAAAA,KAAK,CAAE,uCAAsCnB,IAAI,CAACuB,OAAQ,6BAA4BrB,cAAc,CAAC2B,IAAK,EAArG,CAAL,CACCT,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMwB,IAAI,IAAI;AACZ3C,UAAAA,OAAO,CAAC2C,IAAD,CAAP;AACArC,UAAAA,qBAAqB,CAACD,kBAAkB,GAAG,CAAtB,CAArB;AACAG,UAAAA,qBAAqB,CAACD,kBAAkB,GAAG,CAAtB,CAArB;AACD,SAND;AAQD,OATD,MASO,IAAGjB,QAAQ,CAACa,cAAc,CAACuC,KAAhB,CAAR,GAAiCpD,QAAQ,CAACW,cAAc,CAACyC,KAAhB,CAA5C,EAAmE;AACxEpC,QAAAA,qBAAqB,CAACD,kBAAkB,GAAG,CAAtB,CAArB;AACAG,QAAAA,qBAAqB,CAACD,kBAAkB,GAAG,CAAtB,CAArB;AACD,OAHM,MAGD;AACJqC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;AACF;AACF,GAlBQ,EAkBN,CAAC1C,cAAD,CAlBM,CAAT,CApIsB,CAwJtB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BAEE;AAAK,QAAA,SAAS,EAAC,+CAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,kCAAgC;AAAA,mCAAG;AAAK,cAAA,EAAE,EAAC,MAAR;AAAe,cAAA,GAAG,EAAET;AAApB;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,kBAAhC,eAAuE;AAAA;AAAA;AAAA;AAAA,kBAAvE;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,kCAEE;AAAK,YAAA,SAAS,EAAC,gBAAf;AAAA,mCACE;AAAA,uDAAiB;AAAM,gBAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFF,eAKE;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eASE;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,eAAf;AAAA,oCAEA;AAAK,cAAA,SAAS,EAAC,aAAf;AAAA,qCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAFA,eAKA;AAAK,cAAA,SAAS,EAAC,eAAf;AAAA,qCACE;AAAA,uDAAc;AAAA;AAAA;AAAA;AAAA,wBAAd,eAAuB;AAAM,kBAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,wBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBALA,eAQA;AAAA;AAAA;AAAA;AAAA,oBARA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBATF,eAqBE;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,kCACE;AAAQ,YAAA,SAAS,EAAC,QAAlB;AAA2B,YAAA,EAAE,EAAC,WAA9B;AAA0C,YAAA,OAAO,EAAEiB,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAQ,YAAA,SAAS,EAAC,eAAlB;AAAkC,YAAA,EAAE,EAAC,WAArC;AAAiD,YAAA,OAAO,EAAEyB,SAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBArBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eA6BE;AAAK,QAAA,SAAS,EAAC,+BAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,kCAEE;AAAK,YAAA,SAAS,EAAC,0BAAf;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,QAAf;AAAA,sCACE;AAAK,gBAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAK,gBAAA,SAAS,EAAC,gBAAf;AAAgC,gBAAA,EAAE,EAAC,iBAAnC;AAAA,uCACE;AAAK,kBAAA,GAAG,EAAE5C;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFF,eAYE;AAAK,YAAA,SAAS,EAAC,4BAAf;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,QAAf;AAAA,sCACE;AAAK,gBAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAK,gBAAA,SAAS,EAAC,eAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,aAAf;AAA6B,kBAAA,EAAE,EAAC,kBAAhC;AAAA,6BACGS,cAAc,gBAAG;AAAK,oBAAA,GAAG,EAAEA,cAAc,CAAC6C;AAAzB;AAAA;AAAA;AAAA;AAAA,0BAAH,gBAA4C;AAAK,oBAAA,GAAG,EAAErD;AAAV;AAAA;AAAA;AAAA;AAAA,0BAD7D,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAFF,eAQE;AAAK,gBAAA,SAAS,EAAC,eAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,aAAf;AAA6B,kBAAA,EAAE,EAAC,kBAAhC;AAAA,6BACGU,cAAc,gBAAG;AAAK,oBAAA,GAAG,EAAEA,cAAc,CAAC2C;AAAzB;AAAA;AAAA;AAAA;AAAA,0BAAH,gBAA4C;AAAK,oBAAA,GAAG,EAAErD;AAAV;AAAA;AAAA;AAAA;AAAA,0BAD7D,eAEE;AAAA,2CAAG;AAAM,sBAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,0BAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBARF,eAcE;AAAK,gBAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,sBAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAZF,eA+BE;AAAK,YAAA,SAAS,EAAC,0BAAf;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,QAAf;AAAA,sCAEE;AAAK,gBAAA,SAAS,EAAC,gBAAf;AAAA,uCACE;AAAA,2DAAgB;AAAA,+BAAIY,kBAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAhB,sBAAoD;AAAM,oBAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,0BAApD,wBAA2F;AAAA,+BAAIE,kBAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAFF,eAKE;AAAK,gBAAA,SAAS,EAAC,gBAAf;AAAgC,gBAAA,EAAE,EAAC,iBAAnC;AAAqD,gBAAA,OAAO,EAAE6B,SAA9D;AAAA,uCAEE;AAAK,kBAAA,GAAG,EAAE7C;AAAV;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,sBALF,eASE;AAAK,gBAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,sBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBA/BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA7BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmFD,CAlRD;;GAAMI,I;;KAAAA,I;AAoRN,eAAeA,IAAf","sourcesContent":["// Import React\nimport React, { useState, useEffect } from 'react'\n\n// Get Helpers\nimport { getValue } from '../helpers/helpers'\n\n// Get Images\nimport cardSpread from '../img/card-spread.png'\nimport cardSpreadUpsideDown from '../img/card-spread-upside-down.png'\nimport cardSpace from '../img/card-space.png'\nimport logo from '../img/logo.png'\n\n// Initialize Game\nconst Game = (props) => {\n\n  // Declare Variables as Empty Strings\n  let compCardCodes = \"\"\n  let userCardCodes = \"\"\n\n  // Declare Constant Variables\n  const [deck, setDeck] = useState({})\n  const [compCardPlayed, setCompCardPlayed] = useState(null)\n  // const [compCardFetchStarted, setCompCardFetchStarted] = useState(false)\n  const [userCardPlayed, setUserCardPlayed] = useState(null)\n  // const [bothCardsPlayed, setBothCardsPlayed] = useState(false)\n  const [compCardsRemaining, setCompCardsRemaining] = useState(0)\n  const [userCardsRemaining, setUserCardsRemaining] = useState(0)\n\n  const [loadState, setLoadState] = useState(false)\n\n    // TODO\n    // put second fetches into prior then (It looks like maybe thise has already been done on lines 56 - 92?)\n    // visual loader\n    // Show real number of cards\n    // Use animation to move cards || flip animation\n    // Hide everything until name is entered (cards)\n    // sam vs computer smaller\n    // play button nicer\n    // visual loader: spin circle over cards\n    // Try vue.js\n\n    // DONE\n    // score nicer\n    // if (loadState) return\n    // setLoadState = true\n    // Set load state false\n    // add catch to fetch that throws an error to user\n    // .finally (put load state inside this)\n\n\n  // Start Game\n  // Create/shuffle deck\n  let startGame = event => {\n    document.getElementById('startGame').classList.add('hidden')\n    document.getElementById('playACard').classList.remove('hidden')\n    fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1')\n    .then(response => response.json())\n    .then(deck => {\n      fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/draw/?count=52`)\n      .then(response => response.json())\n      .then(drawn => {\n        let counter = 0\n        drawn.cards.forEach(card => {\n          if(counter % 2 === 0){\n            compCardCodes += `${card.code},`\n            counter += 1\n          } else{\n            userCardCodes += `${card.code},`\n            counter += 1\n          }\n        })\n        return drawn\n      })\n      // Create two piles of 26 cards\n      .then(deck => {\n        fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/compPile/add/?cards=${compCardCodes}`)\n        .then(response => response.json())\n        .then(pile => {\n          setDeck(pile)\n          setCompCardsRemaining(26)\n        })\n        return deck\n      })\n      .then(deck => {\n        fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/userPile/add/?cards=${userCardCodes}`)\n        .then(response => response.json())\n        .then(pile => {\n          setDeck(pile)\n          setUserCardsRemaining(26)\n        })\n      }) \n    })\n\n    // Get users name\n    if(document.getElementsByClassName(\"userName\")){\n      let userNameInput = prompt(\"What's your name?\")\n      if(userNameInput === \"\"){\n        userNameInput = \"Unnamed Guest\"\n      }\n      let userNames = document.getElementsByClassName(\"userName\")\n      for(let i of userNames){\n        i.innerHTML = userNameInput\n      }\n    }\n  }\n\n  // // Computer plays first card\n  // useEffect( () => {\n  //   if(deck && deck.deck_id && !compCardPlayed && !compCardFetchStarted){\n  //     fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/compPile/draw/bottom/?count=1`)\n  //     .then(response => response.json())\n  //     .then(compCard => {\n  //       setCompCardPlayed(compCard.cards[0])\n  //       setDeck(compCard)\n  //     })\n  //     setCompCardFetchStarted(true)\n  //   }\n  // }, [deck, compCardPlayed])\n\n  // Plays cards\n  let playACard = event => {\n    if(deck && deck.deck_id && !loadState){\n      setLoadState(true)\n      // Computer\n      fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/compPile/draw/bottom/?count=1`)\n      .then(response => response.json())\n      .then(compCard => {\n        setCompCardPlayed(compCard.cards[0])\n        setDeck(compCard)\n        return fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/userPile/draw/bottom/?count=1`)\n      })\n      // User\n      .then(response => response.json())\n      .then(userCard => {\n        setUserCardPlayed(userCard.cards[0])\n        setDeck(userCard)\n      })\n      .catch(() => {alert(\"The promise has been broken!\")})\n      .finally(\n        setLoadState(false)\n      )\n    }\n  }\n\n  // Determine who wins\n  useEffect( () => {\n    if(userCardPlayed && compCardPlayed){\n      if(getValue(userCardPlayed.value) > getValue(compCardPlayed.value)){\n        fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/pile/userPile/add/?cards=${compCardPlayed.code}`)\n        .then(response => response.json())\n        .then(data => {\n          setDeck(data)\n          setCompCardsRemaining(compCardsRemaining - 1)\n          setUserCardsRemaining(userCardsRemaining + 1)\n        })\n\n      } else if(getValue(userCardPlayed.value) < getValue(compCardPlayed.value)){\n        setCompCardsRemaining(compCardsRemaining + 1)\n        setUserCardsRemaining(userCardsRemaining - 1)\n      } else{\n        console.log(\"WAR!\")\n      }\n    }\n  }, [userCardPlayed])\n\n  // const drawCard = event => {\n  //   if (deck.piles.userPile.remaining > 0) {\n  //     fetch(`https://deckofcardsapi.com/api/deck/${deck.deck_id}/draw/?count=2`)\n  //     .then(response => response.json())\n  //     .then(data => {\n\n  //       // User plays card\n  //       if(data.cards){\n  //         userCardPlayed.innerHTML = `<img src=${data.cards[0].image}></img>`\n  //         userCardPlayedValue = getValue(data.cards[0].value)\n  //       }\n  //       deck.remaining -= 1\n\n  //       // Decide who wins hand\n  //       if(userCardPlayedValue > compCardPlayedValue){\n  //         // User wins\n  //         // Add comp/user cards to users pile\n  //         userDiscardStack.innerHTML = `<img src=${data.cards[0].image}></img>`\n  //         // \n  //       } else if(userCardPlayedValue < compCardPlayedValue){\n  //           // Computer wins\n  //           console.log(\"You lose!\")\n  //       } else{\n  //           // War!\n  //           console.log(\"War!\")\n  //       }\n\n  //       // Comp plays new card\n  //       // setTimeout(function(){\n  //       //   compCardPlayed.innerHTML = `<img src=${card.cards[0].image}></img>`\n  //       //   compCardPlayedValue = getValue(card.cards[0].value)\n  //       // }\n  //       // , 2000)\n  //     })\n  //   }else{\n  //     userCardPlayed.innerHTML = \"Out of cards\"\n  //   }\n  // }\n\n  return(\n    <div>\n      <div className=\"grid-x\">\n\n        <div className=\"cell medium-4 black-bg cell-padding-top lefty\">\n          <div className=\"cell medium-12\"><p><img id=\"ship\" src={logo}></img></p><br></br></div>\n          <div className=\"cell medium-12\">\n            {/* Comp vs User */}\n            <div className=\"t-user-vs-comp\">\n              <h1>Computer vs. <span className=\"userName\"></span></h1>\n            </div>\n            <br></br>\n          </div>\n          <div className=\"cell medium-12\">\n            <div className=\"t-score-board\">\n            {/* Score */}\n            <div className=\"t-score-big\">\n              <p>Score</p>\n            </div>\n            <div className=\"t-score-small\">\n              <p>Computer: 0<br></br><span className=\"userName\"></span>: 0</p>\n            </div>\n            <br></br>\n            </div>\n          </div>\n          <div className=\"cell medium-12\">\n            <button className=\"button\" id=\"startGame\" onClick={startGame}>Start Game</button>\n            <button className=\"button hidden\" id=\"playACard\" onClick={playACard}>Play a card</button>\n          </div>\n        </div>\n\n        <div className=\"cell medium-8 table-bg righty\">\n          <div className=\"grid-x\">\n            \n            <div className=\"cell medium-12 compCards\">\n              <div className=\"grid-x\">\n                <div className=\"cell medium-2\"></div>\n                <div className=\"cell medium-10\" id=\"comp-card-stack\">\n                  <img src={cardSpreadUpsideDown}></img>\n                </div>\n                {/* <div className=\"cell medium-6 card-stack rotate-left\" id=\"comp-discard-stack\"></div> */}\n              </div>\n            </div>\n            \n            <div className=\"cell medium-12 cardsPlayed\">\n              <div className=\"grid-x\">\n                <div className=\"cell medium-3 cardNumbers\"></div>\n                <div className=\"cell medium-3\">\n                  <div className=\"card-played\" id=\"comp-card-played\">\n                    {compCardPlayed ? <img src={compCardPlayed.image}></img> : <img src={cardSpace}></img>}\n                    <p>Computer</p>\n                  </div>\n                </div>\n                <div className=\"cell medium-3\">\n                  <div className=\"card-played\" id=\"user-card-played\">\n                    {userCardPlayed ? <img src={userCardPlayed.image}></img> : <img src={cardSpace}></img>}\n                    <p><span className=\"userName\"></span></p>\n                  </div>\n                </div>\n                <div className=\"cell medium-3\"></div>\n              </div>\n            </div>\n\n            <div className=\"cell medium-12 userCards\">\n              <div className=\"grid-x\">\n                {/* <div className=\"cell medium-6 card-stack rotate-left\" id=\"user-discard-stack\"></div> */}\n                <div className=\"cell medium-12\">\n                  <p>Computer has <b>{compCardsRemaining} Cards</b> | <span className=\"userName\"></span> has <b>{userCardsRemaining} Cards</b></p>\n                </div>\n                <div className=\"cell medium-10\" id=\"user-card-stack\" onClick={playACard}>\n                  {/* <img src={backOfCard}></img> */}\n                  <img src={cardSpread}></img>\n                </div>\n                <div className=\"cell medium-2\"></div>\n              </div>\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    </div>\n  )\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}