{"ast":null,"code":"var _jsxFileName = \"/Users/samuelgrieve/Desktop/coding/war-card-game/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport Controls from './Controls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = props => {\n  _s();\n\n  const [deck, setDeck] = useState([]);\n  useEffect(() => {\n    fetch(\"https://deckofcardsapi.com/api/deck/new/draw/?count=52\").then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let errorMessage = `${response.status}(${response.statusText})`,\n            error = new Error(errorMessage);\n        throw error;\n      }\n    }).then(response => {\n      return response.json();\n    }).then(body => {\n      setDeck(body);\n    }).catch(error => console.error(`Error in fetch: ${error.message}`));\n  }, []);\n  let cards; // if(deck.cards){\n  //   for(let i = 0; i < deck.cards.length; i++){\n  //     <div>\n  //       <Card\n  //         key = {deck.cards[i].id}\n  //         id = {deck.cards[i].id}\n  //         value = {deck.cards[i].value}\n  //         suit = {deck.cards[i].suit}\n  //         image = {deck.cards[i].image}\n  //       />\n  //     </div>\n  //   }\n  // }\n\n  if (deck.cards) {\n    cards = deck.cards.map(card => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        id: deck.cards.id,\n        value: deck.cards.value,\n        suit: deck.cards.suit,\n        image: deck.cards.image\n      }, deck.cards.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 1\n      }, this);\n    });\n  } // const drawCard = event => {\n  //   fetch(\"https://deckofcardsapi.com/api/deck/<<deck.deck_id>>/draw/?count=2\")\n  //   .then(response => response.json())\n  //   .then(response => console.log(response))\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), cards]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"NGuX+IhPEoaYDnAUn9U4qFBy9U0=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/samuelgrieve/Desktop/coding/war-card-game/src/components/Game.js"],"names":["React","useState","useEffect","Card","Controls","Game","props","deck","setDeck","fetch","then","response","ok","errorMessage","status","statusText","error","Error","json","body","catch","console","message","cards","map","card","id","value","suit","image"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAE,MAAM;AACfO,IAAAA,KAAK,CAAC,wDAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAI;AAChB,UAAGA,QAAQ,CAACC,EAAZ,EAAe;AACb,eAAOD,QAAP;AACD,OAFD,MAEM;AACJ,YAAIE,YAAY,GAAI,GAAEF,QAAQ,CAACG,MAAO,IAAGH,QAAQ,CAACI,UAAW,GAA7D;AAAA,YACAC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAV,CADR;AAEA,cAAMG,KAAN;AACD;AACF,KATD,EAUCN,IAVD,CAUMC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACO,IAAT,EAAP;AACD,KAZD,EAaCR,IAbD,CAaMS,IAAI,IAAI;AACZX,MAAAA,OAAO,CAACW,IAAD,CAAP;AACD,KAfD,EAgBCC,KAhBD,CAgBOJ,KAAK,IAAIK,OAAO,CAACL,KAAR,CAAe,mBAAkBA,KAAK,CAACM,OAAQ,EAA/C,CAhBhB;AAiBD,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,MAAIC,KAAJ,CAvBsB,CAwBtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIhB,IAAI,CAACgB,KAAT,EAAgB;AACdA,IAAAA,KAAK,GAAGhB,IAAI,CAACgB,KAAL,CAAWC,GAAX,CAAgBC,IAAD,IAAU;AAC/B,0BACN,QAAC,IAAD;AAEU,QAAA,EAAE,EAAIlB,IAAI,CAACgB,KAAL,CAAWG,EAF3B;AAGU,QAAA,KAAK,EAAInB,IAAI,CAACgB,KAAL,CAAWI,KAH9B;AAIU,QAAA,IAAI,EAAIpB,IAAI,CAACgB,KAAL,CAAWK,IAJ7B;AAKU,QAAA,KAAK,EAAIrB,IAAI,CAACgB,KAAL,CAAWM;AAL9B,SACiBtB,IAAI,CAACgB,KAAL,CAAWG,EAD5B;AAAA;AAAA;AAAA;AAAA,cADM;AASD,KAVO,CAAR;AAWD,GAlDqB,CAoDtB;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGH,KAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAjED;;GAAMlB,I;;KAAAA,I;AAmEN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Card from './Card'\nimport Controls from './Controls'\n\nconst Game = (props) => {\n  const [deck, setDeck] = useState([])\n\n  useEffect( () => {\n    fetch(\"https://deckofcardsapi.com/api/deck/new/draw/?count=52\")\n    .then(response => {\n      if(response.ok){\n        return response\n      } else{\n        let errorMessage = `${response.status}(${response.statusText})`,\n        error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then(response => {\n      return response.json()\n    })\n    .then(body => {\n      setDeck(body)\n    })\n    .catch(error => console.error(`Error in fetch: ${error.message}`))\n  }, [])\n\n  let cards\n  // if(deck.cards){\n  //   for(let i = 0; i < deck.cards.length; i++){\n  //     <div>\n  //       <Card\n  //         key = {deck.cards[i].id}\n  //         id = {deck.cards[i].id}\n  //         value = {deck.cards[i].value}\n  //         suit = {deck.cards[i].suit}\n  //         image = {deck.cards[i].image}\n  //       />\n  //     </div>\n  //   }\n  // }\n\n  if (deck.cards) {\n    cards = deck.cards.map((card) => {\n      return(\n<Card\n          key = {deck.cards.id}\n          id = {deck.cards.id}\n          value = {deck.cards.value}\n          suit = {deck.cards.suit}\n          image = {deck.cards.image}\n        />\n      )\n    })\n  }\n\n  // const drawCard = event => {\n  //   fetch(\"https://deckofcardsapi.com/api/deck/<<deck.deck_id>>/draw/?count=2\")\n  //   .then(response => response.json())\n  //   .then(response => console.log(response))\n  // }\n\n  return(\n    <div>\n      <h1>Hello</h1>\n      {cards}\n      {/* <Controls drawCard={drawCard} /> */}\n    </div>\n  )\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}